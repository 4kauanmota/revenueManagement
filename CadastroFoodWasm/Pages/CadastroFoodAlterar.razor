@page "/food/alter/{Id}"
@using CadastroFoodsWasm.Helpers;
@using CadastroFoodDll.DOs;
@using CadastroIngredientDll.DOs
@inject NavigationManager NavigationManager

<PageTitle>Alter Food</PageTitle>

<main>
    @if (food == null)
    {
        <p><em>Carregando...</em></p>
    }
    else
    {
        <EditForm Model="@food" OnValidSubmit="@Gravar">
        <DataAnnotationsValidator />
        <ValidationSummary />
            <div>
                <div>
                    <label class="form-label">Name</label>
                    <input class="form-control" @bind="@food.Name" />
                    <ValidationMessage For="() => food.Name" />
                </div>
                
                <div>
                    <label class="form-label">Description</label>
                    <input class="form-control" @bind="@food.Description" />
                    <ValidationMessage For="() => food.Time" />
                </div>
                
                <div>
                    <label class="form-label">Weight</label>
                    <input class="form-control" @bind="@food.Weight" />
                    <ValidationMessage For="() => food.Weight" />
                </div>
                
                <div>
                    <label class="form-label">Time</label>
                    <input class="form-control" @bind="@food.Time" />
                    <ValidationMessage For="() => food.Time" />
                </div>
                
                <div>
                    <label class="form-label">Preparation</label>
                    <input class="form-control" @bind="@food.Preparation" />
                    <ValidationMessage For="() => food.Time" />
                </div>
                
                <div>
                    <label class="form-label">Ingredients</label><br/>
                    <select multiple="multiple">
                        @foreach (var ingredient in ingredients)
                        {
                            @foreach (var i in foodIngredients)
                            {
                                if (ingredient.Id != i.Id)
                                {
                                    cont++;
                                }
                                contAux++;
                            }
                            if (cont == contAux)
                            {
                                <option value="@ingredient.Id" @onclick=@((e) => OptionClickEvent(@ingredient.Id,e))>@ingredient.Name</option>
                            }
                            cont = 0;
                            contAux = 0;
                        }
                    </select>
                </div>
                
                <ul class="ingredients-organization">
                    @foreach (var i in foodIngredients)
                    {
                        <li>
                            <p>@i.Name</p>
                            <button class="btn btn-danger" @onclick="() => Excluir(i.Id)">
                                Take out
                            </button>
                        </li>
                    }
                </ul>

                <div class="mt-2">
                    <button class="btn btn-success" type="submit">Alter</button>
                    <a class="ml-1 btn btn-secondary" href="./Foods">Back</a>
                </div>
    
                <Imagem Entidade="Food" Id=@Id />
                
            </div>
        </EditForm>
    }
</main>

@code {
    [Parameter]
    public string Id { get; set; } = "";
    
    public int cont;
    public int contAux;
    
    private FoodDO? food;
    
    public IList<IngredientDO>? ingredients;
    public IList<IngredientDO>? foodIngredients;

    private AcessoApi<FoodDO> apiFood = new("api/Food");
    private AcessoApi<IngredientDO> apiIngredient = new("api/Ingredient");
    private AcessoApi<IngredientDO> apiIngredientInFood = new("api/Food/Ingredients");
    private AcessoApi<FoodIngredientDO> apiFoodIngredient = new("api/Food/Save/Ingredients");

    private List<string> newIngredients = new();

    protected async override Task OnInitializedAsync()
    {        
        food = await apiFood.RetornarPorIdAsync(Id);
        ingredients = await apiIngredient.RetornarTodosAsync();
        foodIngredients = await apiIngredientInFood.RetornarTodosPorIdAsync(food.Id);
    }

    private async void Excluir(string? id)
    {
        if (id != null)
        {
            string route = $"{food.Id}/Ingredient/{id}";
            await apiFood.ExcluirAsync(route);
        }
    }

    private async void Gravar()
    {
        foreach (var ingredient in newIngredients)
        {
            FoodIngredientDO foodIngredient = new();
            foodIngredient.IdIngredient = ingredient;
            foodIngredient.IdFood = food.Id;
                
            apiFoodIngredient.InserirAsync(foodIngredient);
        }
        
        await apiFood.AlterarAsync(food);
        
        NavigationManager.NavigateTo("Foods");
    }
    
    public void OptionClickEvent(string values, MouseEventArgs evnt)
    {
        if (evnt.CtrlKey)
        {
            if (!newIngredients.Contains(values))
            {
                newIngredients.Add(values);
            }
        }
    }
}
